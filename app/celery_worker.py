import os
import json
import requests
import google.generativeai as genai
from celery import Celery

# --- Configuration ---
SETTINGS_FILE = "/data/settings.json"
REDIS_URL = os.getenv("REDIS_URL")

def load_settings():
    """טוען הגדרות מהקובץ או ממשתני הסביבה"""
    if os.path.exists(SETTINGS_FILE):
        with open(SETTINGS_FILE, 'r') as f:
            return json.load(f)
    else:
        # Fallback to environment variables
        return {
            "GEMINI_API_KEY": os.getenv("GEMINI_API_KEY", ""),
            "GEMINI_MODEL": os.getenv("GEMINI_MODEL", "tts-1"),
            "TTS_VOICE": os.getenv("TTS_VOICE", "echo"),
            "SUCCESS_WEBHOOK_URL": os.getenv("SUCCESS_WEBHOOK_URL", ""),
            "ERROR_WEBHOOK_URL": os.getenv("ERROR_WEBHOOK_URL", "")
        }

# Configure Celery
celery_app = Celery("worker", broker=REDIS_URL)

@celery_app.task(bind=True, max_retries=3, default_retry_delay=60)
def generate_audio_task(self, text: str, phone_number: str):
    """מייצר סאונד על בסיס ההגדרות מהקובץ"""
    print(f"Starting REAL audio generation for: {phone_number}")
    
    # **טעינת ההגדרות המעודכנות בתחילת כל משימה**
    settings = load_settings()
    
    try:
        # Configure Gemini with the loaded key
        genai.configure(api_key=settings.get("GEMINI_API_KEY"))

        print(f"Using model: {settings.get('GEMINI_MODEL')} and voice: {settings.get('TTS_VOICE')}")
        
        model = genai.GenerativeModel(settings.get("GEMINI_MODEL"))
        response = model.generate_content(text, generation_config={
            "tts_voice": settings.get("TTS_VOICE")
        })

        audio_data = b"".join(chunk.data for chunk in response)
        
        if not audio_data:
            raise ValueError("No audio data was generated by the API.")

        file_name = f"{phone_number}.mp3"
        
        # Send the audio file to the success webhook
        success_url = settings.get("SUCCESS_WEBHOOK_URL")
        if not success_url:
             raise ValueError("SUCCESS_WEBHOOK_URL is not configured.")

        files = {'audio_file': (file_name, audio_data, 'audio/mpeg')}
        
        print(f"Sending audio file to success webhook: {success_url}")
        post_response = requests.post(success_url, files=files, timeout=30)
        post_response.raise_for_status() 

        return {"status": "success", "phone_number": phone_number}

    except Exception as exc:
        print(f"Task for {phone_number} failed. Error: {str(exc)}")
        try:
            raise self.retry(exc=exc)
        except Exception as retry_exc:
            error_url = settings.get("ERROR_WEBHOOK_URL")
            if error_url:
                error_payload = {
                    "phone_number": phone_number,
                    "error_message": f"Failed after multiple retries: {str(retry_exc)}"
                }
                requests.post(error_url, json=error_payload, timeout=10)
            print(f"Max retries exceeded for {phone_number}. Sent error notification.")
            return {"status": "failed", "error": str(retry_exc)}